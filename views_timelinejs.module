<?php

/**
 * Implements hook_views_api().
 */
function views_timelinejs_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'views_timelinejs'),
  );
}

/**
 * Implementation of hook_theme()
 */
function views_timelinejs_theme() {
  $base = array('file' => 'theme/views_timelinejs.theme.inc');
  return array(
    'views_timelinejs_nodata' => $base + array(),
    'views_timelinejs_link_to_entity' => $base + array(
      'arguments' => array(
        'uri' => NULL,
        'link_text' => NULL,
      ),
    ),
  );
}

/**
 * Function to include TimelineJS libraries
 */
function views_timelinejs_load_libraries() {
  // Include TimelineJS libraries (Libraries API 1.x)
  if ($path = libraries_get_path('timeline')) {
    drupal_add_css($path . '/compiled/css/timeline.css');
    drupal_add_js($path . '/compiled/js/storyjs-embed.js');
  }
  else {
    drupal_set_message(t('TimelineJS libraries not found in libraries/timeline directory. Timeline will not work.'), 'error', FALSE);
  }
}

/**
 * Implements hook_ctools_plugin_directory for plugin integration for date sources, image sources and timeline themes.
 */
function views_timelinejs_ctools_plugin_directory($module, $plugin) {
  if ($module == 'views_timelinejs') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type.
 */
function views_timelinejs_ctools_plugin_type() {
  return array(
    'date_sources' => array(),
    'text_sources' => array(),
    'media_sources' => array(),
    'tag_sources' => array(),
  );
}

/**
 * A helper function.
 * Returns the date conversion callback function name of a plugin.
 */
function views_timelinejs_get_callback($handler_name, $field_type, $plugin_type) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('views_timelinejs', $plugin_type);
  foreach ($plugins as $plugin) {
    if ($plugin['handler_name'] == $handler_name && $plugin['field_type'] == $field_type) {
      return ctools_plugin_get_function($plugin, 'callback');
    }
  }
}

/**
* Returns the currently logged-in user's timezone.
*
* @return the name of a timezone
*/
function views_timelinejs_get_timezone() {
  global $user;
  return (variable_get('configurable_timezones', 1) && $user->uid && drupal_strlen($user->timezone)) ? $user->timezone : variable_get('date_default_timezone', NULL);
}

function views_timelinejs_convert_to_gregorian($value, $date_format, $timezone, $db_timezone) {
  $timezone = new DateTimezone($timezone);
  $db_timezone = new DateTimezone($db_timezone);
  switch ($date_format) {
    case 'datestamp':
    case 'timestamp':
      $date = new DateTime();
      $date->setTimezone($db_timezone);
      $date->setTimestamp($value);
      break;

    default:
      $date = new DateTime("$value", $db_timezone);
      break;
  }
  $date->setTimezone($timezone);
  return $date->format('M d Y G:i:s');
}

function views_timelinejs_convert_to_iso($value, $date_format, $timezone, $db_timezone) {
  $timezone = new DateTimezone($timezone);
  $db_timezone = new DateTimezone($db_timezone);
  switch ($date_format) {
    case 'datestamp':
    case 'timestamp':
      $date = new DateTime();
      $date->setTimezone($db_timezone);
      $date->setTimestamp($value);
      break;

    default:
      $date = new DateTime("$value", $db_timezone);
      break;
  }
  $date->setTimezone($timezone);
  return $date->format('Y-m-d\TH:i:s\Z');
}

function views_timelinejs_convert_to_timestamp($value, $date_format, $timezone, $db_timezone) {
  $timezone = new DateTimezone($timezone);
  $db_timezone = new DateTimezone($db_timezone);
  switch ($date_format) {
    case 'datestamp':
    case 'timestamp':
      $date = new DateTime();
      $date->setTimezone($db_timezone);
      $date->setTimestamp($value);
      break;

    default:
      $date = new DateTime("$value", $db_timezone);
      break;
  }
  $date->setTimezone($timezone);
  return $date->format('U');
}
